Rails-Devise-Pundit-Roles
=========================

While Devise stands for authentication and Pundit for authorisation, 
Rails-Devise-Pundit-Roles adds roles and a rights and admission management to the project. It is made for multi-company installations and administrated rights management.
While Rails-Devise-Pundit from https://github.com/RailsApps/rails-devise-pundit (on which this project is based) assumes all permissions kept in the user model, this project puts roles and associated right into a separate view. Roles can actually only be assigned by admins. The User view is restricted to authentication data. (Except for admins, getting their administrative right.) Additionally you get a profile view per user, so that everybody can change its application preferences.
Actually, this application assumes a two-level-hierarchy above the user: Team and Company. A role defines a triple of User, Team and Company. Within Pundits policies you may restrict access to data to the same user, team or company as the actual user. Every data entry in a view is tagged with the role of its creator, and you just have to match. Standard policies and scopes are inherited from application_policy.
Just feel free to play around.

Rails
========
This application requires:

- Ruby 2.2.0
- Rails 4.2.0

Getting Started
================
Step 1

Download this project.

Step 2

If you would like to test it with a new project just call:
  rails new <projectname>
or you can apply it to your existing project. !! Please make a copy of your own project before you dare applying these generators!! It is absolutely your own risk.

Step 3

In your project call
  rails g generator jumaccount
  rails g generator jumadmission
You do not need these generators, but the will be registered this way.

Step 4

Copy the downloaded generator-hierarchies into your project hierarchy:
  <projectname>/lib/generators/jumaccount
  <projectname>/lib/generators/jumadmission
You may overwrite / delete the existing hierarchies, that were created in step 3.

Now you are ready to go!

Step 5

Call 
  rails g jumaccount <projectname>
  
Test your application. It should now have a new starting view "visitors" and a possibility to register / login.
Your first user is
  "user@example.com"
He is an admin and his password is "changeme". It is not a joke, but helps you to get in. You should login, create another admin! user with a more secure password, and keep the new one safe. Then delete the user user@example.com.

Step 6

Now you should add rights and roles to your own views.
If you do not have any own view, just create a standard scaffold like
  rails g scaffold <view> field1:string field2:string tracks:integer
  rake db:migrate
After this you can use the second generator:
  rails g jumadmission <projectname> <view>
Add your menu to app/layouts/navigation.html.erb

Documentation and Support
==========================
Just here.

Issues
=======
1. The role system is not highly developped. There should be the roles for "company administator" and "team administrator", each of which might give their rights to users.
2. Ideally even the system admin would be a role.
3. I18n is not fully supported for all views.

Similar Projects
================
Rails-Devise-Pundit


Rails Composer Protocol
=======================

Rails Devise Pundit

Rails Composer, open source, supported by subscribers.
Please join RailsApps to support development of Rails Composer.
Need help? Ask on Stack Overflow with the tag 'railsapps.'
Problems? Submit an issue: https://github.com/RailsApps/rails_apps_composer/issues
Your application contains diagnostics in this README file.
Please provide a copy of this README file when reporting any issues.


option  Build a starter application?
choose  Enter your selection: [rails-devise-pundit]
option  Get on the mailing list for Rails Composer news?
choose  Enter your selection: [none]
option  Web server for development?
choose  Enter your selection: [webrick]
option  Web server for production?
choose  Enter your selection: [passenger]
option  Database used in development?
choose  Enter your selection: [sqlite]
option  Template engine?
choose  Enter your selection: [erb]
option  Test framework?
choose  Enter your selection: [none]
option  Continuous testing?
choose  Enter your selection: []
option  Front-end framework?
choose  Enter your selection: [bootstrap3]
option  Add support for sending email?
choose  Enter your selection: [smtp]
option  Authentication?
choose  Enter your selection: [devise]
option  Devise modules?
choose  Enter your selection: [default]
option  OmniAuth provider?
choose  Enter your selection: []
option  Authorization?
choose  Enter your selection: [pundit]
option  Use a form builder gem?
choose  Enter your selection: [none]
option  Add pages?
choose  Enter your selection: [users]
option  Set a locale?
choose  Enter your selection: [none]
option  Install page-view analytics?
choose  Enter your selection: [none]
option  Add a deployment mechanism?
choose  Enter your selection: [capistrano3]
option  Set a robots.txt file to ban spiders?
choose  Enter your selection: [true]
option  Create a GitHub repository? (y/n)
choose  Enter your selection: []
option  Add gem and file for environment variables?
choose  Enter your selection: [false]
option  Reduce assets logger noise during development?
choose  Enter your selection: [true]
option  Improve error reporting with 'better_errors' during development?
choose  Enter your selection: [true]
option  Use 'pry' as console replacement during development and test?
choose  Enter your selection: [false]
option  Use or create a project-specific rvm gemset?
choose  Enter your selection: [false]
